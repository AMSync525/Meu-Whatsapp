// leitor de qr code
const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js'); // Mudan√ßa Buttons
const client = new Client();
// servi√ßo de leitura do qr code
client.on('qr', qr => {
    qrcode.generate(qr, {small: true});
});
// apos isso ele diz que foi tudo certo
client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});
// E inicializa tudo 
client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms)); // Fun√ß√£o que usamos para criar o delay entre uma a√ß√£o e outra

// Constantes para mensagens e links
const CONSTANTS = {
    GROUP_LINK: 'https://chat.whatsapp.com/IJXALiCCXNf8Mjf3FsoDB8',
    BOSS_LINE: '841006962',  // Linha principal do boss
    SUPPORT_LINES: [
        '841006962', // Boss
        '856108983',
        '842131520',
        '841678338',
        '844809754',
        '847733693'
    ],
    PAYMENT_INFO: 'Formas de pagamento:\nM-Pesa\n841006962\nM-Mola\n874006962\nBIM\n897555842\nALCIDIO RUBEN MACUACUA'
};

// Adicionando constantes para personaliza√ß√£o do bot
const BOT_CONFIG = {
    name: 'Alcidio',
    description: 'seu assistente virtual de vendas de pacotes'
};

// Fun√ß√£o para obter sauda√ß√£o baseada na hora
function getGreeting() {
    const hour = new Date().getHours();
    if (hour < 12) return "Bom dia";
    if (hour < 18) return "Boa tarde";
    return "Boa noite";
}

client.on('message', async msg => {
    try {
        const saudacoes = msg.body.toLowerCase().trim();
        if ((saudacoes.match(/^(menu|oi|ola|ol√°|bom dia|boa tarde|boa noite|que)$/i) || 
            saudacoes === 'dia' || 
            saudacoes === 'tarde' || 
            saudacoes === 'noite') && 
            msg.from.endsWith('@c.us')) {
            
            const chat = await msg.getChat();
            const contact = await msg.getContact();
            const name = contact.pushname || 'Cliente';

            await delay(1500);
            await chat.sendStateTyping();
            await delay(1500);

            await client.sendMessage(msg.from, 
                `${getGreeting()}, ${name}! Eu sou o ${BOT_CONFIG.name}, ${BOT_CONFIG.description}. üòä\n\n` +
                `*MENU PRINCIPAL*\n\n` +
                `1 - Como funciona\n` +
                `2 - Pacotes de Internet\n` +
                `3 - Pacotes de Chamadas\n` +
                `4 - Entrar no Grupo\n` +
                `5 - Outras perguntas`
            );
        }

        // Processar apenas as op√ß√µes do menu (1-5)
        if (msg.body === '1' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();

            await delay(2000);
            await chat.sendStateTyping();
            await delay(2000);
            
            // Primeira mensagem - explica√ß√£o clara do processo
            await client.sendMessage(msg.from, 
                `√â muito simples! üòä\n\n1Ô∏è‚É£ Escolha seu pacote\n2Ô∏è‚É£ Fa√ßa o pagamento\n3Ô∏è‚É£ Envie o comprovante no grupo\n4Ô∏è‚É£ Informe o n√∫mero que receber√° o pacote\n\nPronto! Ativaremos seu pacote rapidamente! üöÄ`
            );

            await delay(2000);
            await chat.sendStateTyping();
            await delay(2000);
            
            // Segunda mensagem - informa√ß√µes de pagamento
            await client.sendMessage(msg.from, CONSTANTS.PAYMENT_INFO);

            await delay(2000);
            await chat.sendStateTyping();
            await delay(2000);
            
            // Terceira mensagem - links importantes
            await client.sendMessage(msg.from, 
                `‚ú® Para finalizar, entre no nosso grupo:\n${CONSTANTS.GROUP_LINK}\n\nüìû Precisa de ajuda? Contate nosso suporte:\n${CONSTANTS.BOSS_LINE}`
            );
        }
        if (msg.body === '2' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();

            // Pacotes Di√°rios
            await delay(1500);
            await chat.sendStateTyping();
            await delay(1500);
            
            await client.sendMessage(msg.from, 
                `‚îÅ‚îÅ‚îÅ‚îÅ *PACOTES DI√ÅRIOS* ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                `          üí´ *INTERNET* üí´\n\n` +
                ` *Pacotes Leves*\n` +
                `‚Ä¢ *5MT* = _250MB_\n` +
                `‚Ä¢ *10MT* = _512MB_\n` +
                `‚Ä¢ *15MT* = _850MB_\n\n` +
                `üì± *Pacotes M√©dios*\n` +
                `‚Ä¢ *18MT* = _1024MB_\n` +
                `‚Ä¢ *30MT* = _1707MB_\n` +
                `‚Ä¢ *50MT* = _2844MB_ üèÜ\n\n` +
                `üì± *Pacotes Plus*\n` +
                `‚Ä¢ *80MT* = _4551MB_\n` +
                `‚Ä¢ *100MT* = _5698MB_\n` +
                `‚Ä¢ *150MT* = _8533MB_\n\n` +
                `_Aguarde para ver os pacotes semanais..._`
            );

            // Pacotes Semanais
            await delay(2000);
            await chat.sendStateTyping();
            await delay(2000);

            await client.sendMessage(msg.from, 
                `‚îÅ‚îÅ‚îÅ‚îÅ *PACOTES SEMANAIS* ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                `         üåü *7 DIAS* üåü\n\n` +
                `üì° *Pacotes B√°sicos*\n` +
                `‚Ä¢ *27MT* = _857MB_\n` +
                `‚Ä¢ *44MT* = _1.7GB_\n` +
                `‚Ä¢ *73MT* = _2.9GB_\n\n` +
                `üì° *Pacotes Interm√©dios*\n` +
                `‚Ä¢ *85MT* = _3.4GB_\n` +
                `‚Ä¢ *126MT* = _5.2GB_ üèÜ\n` +
                `‚Ä¢ *170MT* = _7.1GB_\n\n` +
                `üì° *Pacotes Avan√ßados*\n` +
                `‚Ä¢ *255MT* = _10.7GB_\n` +
                `‚Ä¢ *340MT* = _14.3GB_\n\n` +
                `_Aguarde para ver os pacotes mensais..._`
            );

            // Pacotes Mensais
            await delay(2000);
            await chat.sendStateTyping();
            await delay(2000);

            await client.sendMessage(msg.from, 
                `‚îÅ‚îÅ‚îÅ‚îÅ *PACOTES MENSAIS* ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                `         ‚≠ê *30 DIAS* ‚≠ê\n\n` +
                `üöÄ *Pacotes Econ√≥micos*\n` +
                `‚Ä¢ *87MT* = _2.8GB_\n` +
                `‚Ä¢ *200MT* = _7GB_\n\n` +
                ` *Pacotes Premium*\n` +
                `‚Ä¢ *280MT* = _12GB_\n` +
                `‚Ä¢ *450MT* = _20GB_ üèÜ\n` +
                `üöÄ *Pacotes Ultra*\n` +
                `‚Ä¢ *750MT* = _34GB_\n` +
                `‚Ä¢ *880MT* = _40GB_`
            );

            // Mensagem final
            await delay(1500);
            await chat.sendStateTyping();
            await delay(1500);
            
            await client.sendMessage(msg.from, 
                `‚îÅ‚îÅ‚îÅ‚îÅ *COMO ACTIVAR* ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                `*1.* _Escolha seu pacote preferido_\n` +
                `*2.* _Entre no grupo:_\n` +
                `   ${CONSTANTS.GROUP_LINK}\n\n` +
                `*3.* _Precisa de ajuda?_\n` +
                `   üìû *${CONSTANTS.BOSS_LINE}*\n\n` +
                `üèÜ = _Pacotes mais vendidos_`
            );
        }
        if (msg.body === '3' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();

            await delay(1500);
            await chat.sendStateTyping();
            await delay(1500);

            await client.sendMessage(msg.from, 
                `‚îÅ‚îÅ‚îÅ‚îÅ *PACOTES ILIMITADOS* ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                `        üåü *30 DIAS* üåü\n\n` +
                `üìû *Pacote Bronze*\n` +
                `‚Ä¢ *1. 450MT*\n` +
                `  _11GB de Internet_\n` +
                `  _Chamadas Ilimitadas_\n` +
                `  _SMS Ilimitadas_\n\n` +
                `üìû *Pacote Prata*\n` +
                `‚Ä¢ *2. 500MT*\n` +
                `  _15GB de Internet_\n` +
                `  _Chamadas Ilimitadas_\n` +
                `  _SMS Ilimitadas_\n\n` +
                `üìû *Pacote Ouro* üèÜ\n` +
                `‚Ä¢ *3. 800MT*\n` +
                `  _31GB de Internet_\n` +
                `  _Chamadas Ilimitadas_\n` +
                `  _SMS Ilimitadas_\n\n` +
                `üìû *Pacote Diamante*\n` +
                `‚Ä¢ *4. 950MT*\n` +
                `  _41GB de Internet_\n` +
                `  _Chamadas Ilimitadas_\n` +
                `  _SMS Ilimitadas_`
            );
            
            await delay(1500);
            await chat.sendStateTyping();
            await delay(1500);

            await client.sendMessage(msg.from, 
                `‚îÅ‚îÅ‚îÅ‚îÅ *COMO ACTIVAR* ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                `*1.* _Escolha seu pacote preferido_\n` +
                `*2.* _Entre no grupo:_\n` +
                `   ${CONSTANTS.GROUP_LINK}\n\n` +
                `*3.* _Precisa de ajuda?_\n` +
                `   üìû *${CONSTANTS.BOSS_LINE}*\n\n` +
                `üèÜ = _Pacote mais vendido_`
            );
        }
        if (msg.body === '4' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();

            await delay(3000); //delay de 3 segundos
            await chat.sendStateTyping(); // Simulando Digita√ß√£o
            await delay(3000);
            await client.sendMessage(msg.from, `Link do grupo: ${CONSTANTS.GROUP_LINK}\nLinha do Apoio: ${CONSTANTS.BOSS_LINE}`);
        }
        if (msg.body === '5' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();

            await delay(3000);
            await chat.sendStateTyping();
            await delay(3000);
            
            const supportMessage = `Nossos atendentes est√£o prontos para te ajudar! ü§ù\n\n` +
                `üëë Atendente Principal:\nüìû @${CONSTANTS.BOSS_LINE}\n\n` +
                `Outros atendentes dispon√≠veis:\n` +
                CONSTANTS.SUPPORT_LINES.slice(1).map(number => `üìû @${number}`).join('\n') +
                `\n\nVoc√™ tamb√©m pode nos encontrar no grupo:\n${CONSTANTS.GROUP_LINK}`;

            await client.sendMessage(msg.from, supportMessage);
        }

    } catch (error) {
        console.error('Erro:', error);
        // Mant√©m o log de erro mas n√£o envia mensagem para o usu√°rio
    }
});

// Fun√ß√£o para verificar se o n√∫mero est√° na blacklist
const blacklistedNumbers = new Set();
async function isBlacklisted(number) {
    return blacklistedNumbers.has(number);
}

// Middleware para verificar mensagens antes de processar
client.on('message_create', async (msg) => {
    if (await isBlacklisted(msg.from)) {
        console.log(`Mensagem bloqueada do n√∫mero: ${msg.from}`);
        return;
    }
    // Continua o processamento normal da mensagem
});